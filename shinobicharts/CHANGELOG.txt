ShinobiCharts CHANGELOG

***All changes additionally apply to the Xamarin.iOS version unless otherwise stated***

2.8.0 to 2.8.1 (20-Apr-2015)
==========
* Adds ability to alter the rate at which tick marks are refreshed. This can improve performance on older devices - see 'tickLabelRefreshRate' property on SChartAxis for more details. [SC-2872]
* Fix issue where defaultRange/initWithRange on discontinuous date-time axis was not taking skips into account [SC-2706].
* Fixed artefacts appearing when wrapping points on a radar or polar chart. [SC-2628]
* Column, Bar, OHLC and Candlestick series subclasses will now group correctly with their superclass [SC-2251].
* Fix rare out-of-bounds with the pinch-pan gesture recogniser caused by out-of-order iOS gesture calls [SC-2888].
* Add a 'flushPendingGLOperations' method to the chart API - this allows all pending GL operations to be flushed to the GPU, which can be called when the app is backgrounded, ensuring the chart doesn't attempt the access the GPU while not the foreground app [SC-1198].
* Add a 'flat candlestick' feature - this allows candlesticks whose 'open' value equals their 'low' to have a horizontal line drawn where the candlestick would normally be [SC-2747].
* Fixes issue with Xamarin bindings where nfloat parameters were being matched incorrectly to floats on the native side in a 64 bit environment. [SC-2883]
* Fixes compiler warning generated by Xcode 6.3 with regards to SChartBandSeries orientation property. [SC-2762]
* Fixed SChartDateTimeAxis not correctly calculating the size of it's longest label.

2.7.3.hotfix2 & 2.7.3.1 to 2.8.0 (1-Mar-2015)
==========
* Improved tick mark performance. This has led to a major increase in performance of the charts, which are no longer cpu bound. [SC-2671]
* The SChartData protocol now returns NSDate objects when using an SChartDateTimeAxis rather than NSNumbers of the timeIntervalSince1970 value.
* Fixed issue where delegate method "sChart:ToggledSelectionForPoint:…" was passing in incorrect datapoint values for SChartCategoryAxis.
* Allows user to release the theme on the ShinobiCharts singleton by setting the theme property to nil. This allows the user to remove memory growth when the chart has been allocated then deallocated memory.
* Implemented rounded corners for bars & columns [SC-2523,2449]
* Improved OHLC Series performance. [SC-2449]
* Removed candlestick border-gap [SC-771].
* Fixed memory leak in Bar and Column Series. [SC-2526]
* Improved performance of appending data to an initially empty chart [SC-2557]
* Fixed issue where Pie/Donut series wouldn’t show the correct crust colour or chart effect. [SC-2393,2432]
* Fixed infinite loop caused when calculating an axis range for a series with a single point which has a very large value.
* Slight behaviour change if a range is not set on an axis showing a series with a single datapoint. The minimum range value will now be half the datapoint’s value subtracted from the datapoint value & the maximum range value will be half the datapoint’s value added to the datapoint value. There is an exception if the datapoint value is zero, this will keep the old behaviour of having a range of one entered around zero.
* Translated Objective-C samples into swift and pulled into separate folders. [SC-2404]
* Chart crosshair is now a protocol - this allows more flexibility in assigning your own crosshair to the chart.
* Fixed an issue where panning a pie/donut series would result in the series
rotating the opposite way to what was expected.
* Fixed an issue where SChartCrosshair would consume a large amount of memory when drawing crosshair lines. [SC-2621]
* Fixed issue where a single bar/column datapoint wasn’t rendering correctly. [SC-2068]
* Implemented Pie/Donut Series spokes. This feature offsets a slice’s label outside of the series and draws a line from it to the slice center. Spokes are enabled by setting ‘style.spokeStyle.showSpokes = YES’ on the pie/donut series’ style object and can be used on a per-slice basis (a code sample can be found in the User Guide).  [SC-1370]
* Implemented Series Crosshair. Features a tooltip that assumes the color of the series it’s tracking and a caret that points towards the currently tracked datapoint. [SC-1371]
* Privatises SChartInternalDataPoint - all public references of SChartInternalDataPoint are replaced with id<SChartData>. [SC-2697]
* Fixed Logarithmic Axis not copying base property correctly. [SC-2617]
* Fixes issue where grouping separator of "," was being manually set on SChartNumberAxis' labelFormatter [SC-2651].
* Deprecated method ‘allChartSeries’ on ShinobiChart has been removed. Use ‘series’ instead.
* Deprecated property ‘chartSeries’ on ShinobiChart has been removed. Use ‘series’ instead.
* Fixes issue where crosshair, if `interpolatePoints` was enabled, would be passed coordinate values of infinity if multiple datapoints had the same value on the independent axis. [SC-2639]
* Fixes issue where chart would swallow gestures when nested within a UIScrollView. If panning/zooming is disabled in the direction being panned/zoomed then gesture is now forwarded to the chart’s container. [SC-1143]
* Fixed an issue where the value of showLabels on SChartDataPointLabelStyle would be overwritten when setting it in a custom theme. [SC-2729]
* Improved major tick frequency when the user supplied frequency can’t be drawn [SC-1082].
* Fixed datetime axis tick labels from flickering between alternate dates when panning [SC-2701].
* Minor ticks are now only drawn between major ticks and not on them [SC-1309].
* Fix memory leak in graphics code when drawing certain bar/column fills [SC-2686].

2.7.3.hotfix1 to 2.7.3.1 (20-Jan-2014)
==========

* Xamarin bindings are now Unified API compatible.

2.7.3.hotfix1 to 2.7.3.hotfix2 (11-Dec-2014)
==========
* Refresh gesture-recogniser states on a chart redraw. This allows crosshairEnabled or selectionMode changes to affect the gesture recognisers without creating new series and doing a full reload.
* Removed candlestick border-gap [SC-771].
* Fixed issue where Pie/Donut series wouldn’t show the correct crust colour or chart effect. [SC-2393,2432]
* Fixed leak of SChartLogger [SC-2391].
* Fixed NaNs propagating into UIKit from zero-value pie/donut series [SC-795].
* Fixed bad access caused by strong user reference to canvas after the chart has dealloced [SC-1112].
* Fixed issue where a rogue texture would occasionally appear on radial line charts where the line series was set to wrap-around to the start [SC-2628].

2.7.3 to 2.7.3.hotfix1 (30-Sep-2014)
==========
* Fixes issue whereby title & legend would jitter whilst panning when using certain storyboard options.
* Axis data-range now includes all multi-X and multi-Y datapoint values.
* Chart logs error when multiple axes are used in Standard edition of Charts, rather than crashing without warning.

2.7.2 to 2.7.3 (9-Sep-2014)
==========
* Adds iOS8 compatibility.
* Adds Swift getting started guide with bridging header.

2.7.1 to 2.7.2 (5-Sep-2014)
==========
* Improves data loading (initial render) performance for single value data point series types (line, column, etc).
* Improves performance during panning and zooming for all series types.
* Tickmarks are no longer calculated if hidden (showTicks and showLabels properties both set to NO on the style object). This represents a noticeable performance improvement, especially when "hiding" axes.
* Tickmarks are no longer restyled when panning and zooming (no functional change, performance improvement).
* Exposes a new property for controlling the rendering of series. numberOfDataPointsPerBin (on the series object) determines the number of "bins" that will be used to group the series data. Defaults to the size of the data series (i.e.: one "bin") which is optimal unless streaming data. Having more than one "bin" (i.e. a lower value than the number of data points for the series) allows the chart to re-render less during streaming and therefore improves performance. This was previously fixed at a much lower value.
* Removing an axis and adding it again will no longer cause the crash “SChartAxis at x already belongs to this chart.”
* Crosshairs & selection events no longer favour empty series over series with data points. This resolves an issue where the crosshair would not appear or would appear at 0 when any series had no data points.
* Fixes an issue where the chart would crash if the crosshair was enabled on a step line series.
* Fixes an issue where the chart would render twice when first loaded. This now means that the renderFinished delegate method will only be called once at initial render. However, it is still also called after any render such as device orientation change or panning/zooming.

2.7.0 to 2.7.1 (14-Aug-2014)
==========
* Fixed issue where delegate method "sChart:ToggledSelectionForPoint:…" was passing in incorrect datapoint values for SChartCategoryAxis.
* Fixed a memory leak whereby SChartTitle and other objects would be retained after release.

2.6.2.ea1 to 2.7.0 (03-Jul-2014)
==========
* Replaced method parameters of type SChartInternalDataPoint to id<SChartData> in SChartOHLCSeries & SChartCandlestickSeries classes.
* Adds individual bar/column datapoint styling. Each bar/column can now be styled by overriding the styleForPoint method on SChartBarSeries (or SChartColumnSeries). This means point selection for bar/column series now has a visual effect.
* Adds individual datapoint styling to the SChartPointSeries and SChartRadialLineSeries. Each datapoint can now be styled by overriding series' styleForPoint method. Note that the following series inherit this behaviour from SChartPointSeries: SChartBubbleSeries, SChartScatterSeries, SChartLineSeries, SChartStepLineSeries.
* Adds discontinuous line series support. Datapoints with a nil x- or y-value are supported for that orientation. This now creates gaps in a line series.
* Fixes tick marks on logarithmic axes.
* Fixes issue where manually returned tick values would not work with logarithmic axes.
* Fixes issue with labels not being properly clipped on Discontinuous Axes.
* Fixes issue where tick mark labels would disappear if they were in diagonal orientation, and the device was rotated.
* Fixes z-ordering for certain interwoven series, such as two columns with an intermediate line. This rectifies the behaviour and restores the series drawing order to back-to-front, i.e. series 0 is the furthest from the viewport.
* Fixes cross-bin deselection. Previously if two points in different "data-bins" were selected after each other, the last selected point wouldn't be visually deselected due to a bin-invalidation issue. This is now resolved.
* Updates SChartInternalDataPoint to correctly adopt the SChartData protocol. However, this class is intended for internal use so any methods which use the class on the public API have been deprecated. These methods will be removed in future releases. For now, they are included in a separate category.
* Updates ShinobiCharts imports so that the user can just import <ShinobiCharts/ShinobiCharts.h> and get all the headers they need. This should make things easier for the user, as this is the header that Xcode will add automatically for them.
* Moves the getInfo method from ShinobiChart to ShinobiCharts. The methods on ShinobiChart have been deprecated.
* Moved all the deprecated properties and methods on SChartAxis.h to SChartAxis+Deprecated.h.

2.6.1 to 2.6.2.ea1 (29-May-2014)
==========
* Fixes issue whereby skips on discontinuous axes would only be included for the data-range of the most recently added series.
* Fixes tick marks on logarithmic axes
* Fixes issue where manually returned tick values would not work with logarithmic axes
* Fixes issue with labels not being properly clipped on Discontinuous Axes.

2.6.0.hotfix1 to 2.6.1 (23-Apr-2014)
==========

* Changes the tick label font (lightFontName) on the Dark theme (iOS6 Default Theme) and Light theme from Nunito-Light to Nunito-Regular.
* Improves handling of custom label formatters by calculating an expected length for the average tick label.
* Removes excessive stackIndex warnings caused in Cartesian series dealloc.
* Fixes memory issue in the area of styling.
* Fixes memory issue in the area of hit detection.
* Fixes issue whereby chart background would turn back when set to [UIColor clearColor].
* Fixes issue whereby crosshair would position incorrectly on a category axis.
* Fixes issue where the legend wasn't given the correct frame when positioned Bottom Middle.
* Fixes issue whereby chart title and axis titles would become misaligned after device rotation.
* Fixes issue with getInfo returning "Unversioned".
* Fixes issue whereby the canvas frame is calculated using an outdated legend frame when applying a theme.
* Adds warning when using NSTextAlignmentJustified on chart style objects for iOS version less than 7.0.
* Fixes issue where layoutSubviews was being called from a background thread.

2.6.0 to 2.6.0.hotfix1 (07-Apr-2014)
==========
* Fixes issue with Trial versions not containing 64-bit slice.

2.5.7 to 2.6.0 (01-Apr-2014)
==========
* Add support for radar and polar charts series.
* Add support for data-point labels.
* Changed the type of the "secondaryAxisOffset" property on SChartAxis from float to CGFloat.
* Fixes bug where background color was reset if the application was sent to the background then resumed.
* Fixes value returned by [chart getPlotAreaFrame].
* Fixes misaligned y-axis title when chart title was on.
* Fixes bug with resizing chart using NSLayoutConstraints.
* Adds styling for individual points on the OHLC series.
* Fixes bug with styleForPoint:previousPoint method where every 64th point returns nil previous point object.
* Fixes bug where chart could crash if data was loaded in the background and the chart hadn’t had its axes explicitly set.
* Fixes bug with memory use when stepping over large date range with skips
* Fixes bug with transparent thick lines being drawn as overlapping/with artefacts.
* Fixes bug with z-ordering between lines series with points and column series.

* Removed deprecated property interColumnPadding.
* Removed deprecated property interColumnSetPadding.
* Removed deprecated property interBarPadding.
* Removed deprecated property interBarSetPadding.
* Removed deprecated property minimumFontSize.
* Removed deprecated method calcPrecision: from SChartNumberAxis.

* Deprecates cornerRadius on SChartLegend and has been replaced by a cornerRadius property on the SChartLegend's style object.
* Deprecates showTicksSet on SChartTickStyle.
* Deprecates showLabelsSet on SChartTickStyle.
* Deprecates tickLabelOrientationSet on SChartTickStyle.
* Deprecates SChartMidnightTheme.
* Deprecated property userSetFrame on SChartTitle.



2.5.6 to 2.5.7 (02-Jan-2014)
==========
* Fixes bug with OpenGL rendering when data points were removed from the start of series during streaming.
* Fixes issue with anti-aliasing.
* Boosts performance of discontinuous date/time axes.
* Updates framework to build against libc++ rather than libstdc++.
* Fixes bug where data points in a series weren't properly cleared when we reload data.
* Fixes bug where axes disappeared if we called redraw on the chart from a background thread.
* Fixes issue with floating crosshair positioning and labelling.



2.5.5 to 2.5.6 (05-Nov-2013)
==========
* Adds styling for individual points on the candlestick series.
* Fixes bugs with selection, crosshairs and annotations on category axes.
* Fixes bug on date/time axis when reloading data having set a default range on the axis.
* Fixes bug with selection and crosshairs on chart series when a series contains 0 data points.
* Fixes Xamarin.iOS bug where tick marks and grid lines were not being removed on zoom and pan.



2.5.4 to 2.5.5 (15-Oct-2013)
==========

* Adds Text alignment for tick labels
* Adds ShinobiChartLog. All warning or error messages are now prepended by "ShinobiCharts:"
* Deprecates minimumFontSize, in favour of minimumScaleFactor on SChartTitleStyle

* Fixes issue with selecting points in unordered bins
* Fixes issue with momentum panning and zooming.
* Fixes issue with crosshair alignment after panning and zooming.
* Fixes issue where the wrong texture would be applied to some datapoints.
* Fixes issues with DateTime axes and Category axes.



2.5.3 to 2.5.4 (01-Oct-2013)
==========

* This improves the workaround introduced in 2.5.3 to address OpenGL ES backwards compatibility issues on iPhone 5s. The workaround should now work correctly on iOS 6 devices in debug mode.



2.5.1 to 2.5.3 (27-Sep-2013)
==========

* Note that 2.5.2 was an internal only release.

* With the iPhone 5s, Apple has moved to a new processor architecture that is claimed to be fully backwards compatible.  Whilst this should mean support for existing GL code, like our own, we have discovered a bug in Apple’s multi-sampling implementation. We have implemented a work-around and raised a radar with Apple to alert them of this issue.

* Fixes a bug with axis title labels, affecting arm64 simulator builds.



2.5.0 to 2.5.1 (19-Sep-2013)
==========

* Adds arm64 support (includes changes to primitive parameter types to accommodate 32bit - 64bit compatibility)

* Changes minimum supported version to iOS6 (mandated by arm64 slice inclusion) - see version 2.5.0 for < iOS6

* NOTE: Xamarin bindings do not contain a 64-bit slice. This will be made available as soon as Xamarin provide the tooling



2.3.1 - 2.5.0 (11-Sep-2013)
==========

In the latest release of our ShinobiControls, we have taken the opportunity to bring our products into line with each other, and to update our release process. Any future major releases will include all of our products, rather than having separate releases for individual products. The Shinobi Suite is currently at version 2.5.0, so we have updated all of our products to have this version number.

* Added iOS7 theme, which the chart will now default to on iOS7 devices.

* Added a utility class (ShinobiCharts) that allows the developer to set the theme and licenseKey for all of their charts centrally.

* Chart style and theme classes now conform to the NSCopying protocol.

* Added the property legendItem to SChartSeries which allows the developer to specify an object that adheres to the SChartLegendItem protocol to supply the series title & legend symbol for that series.

* The methods setTheme: and applyTheme have been deprecated and replaced by the method applyTheme: which will apply the supplied theme.

* Fixes an issue where 'pixelValueForDataValue' would give an incorrect return value on an axis with a transform.

* Improved performance of tick mark calculation when using a DateTimeAxis.

* Added properties to the ShinobiChart to allow chart title positioning, which were previously only available by using the chart's theme.

* Fixed issue whereby tick labels & data range were not being calculated correctly when an axis was being initialised with a large range.

* Fixed various issues regarding data to pixel and pixel to data mapping.

* Deprecated 'offsetForDataValue:inSeries:' in favor of 'offSetForSeries:'.



2.3.0 - 2.3.1 (30-Aug-2013)
==========

Mostly minor fixes:

* Category axes initWithRange / defaultRange issue fixed

* X-axis tick label sizing now correctly interprets label length

* Truncation on tick labels is no longer present

* Stack data series appending bug fixed

* Other minor fixes and tweaks



2.2.1 - 2.3.0 (7-Aug-2013)
==========

* Charts is now distributed in a disk image with a pkg installer. This will install the framework to Xcode where it can be included in projects like any Apple framework.

* The user-guide and samples have been improved with more information and how-to guides

* Charts now support appending data via methods on the chart itself. This is supported by a heavily modified render engine for optimum performance.

* Bubble series now have their own dedicated class to improve support for this series type.

* Improved tickmark support for discontinuous axes and several bugs in this area fixed - including an infinite loop.

* Other bug fixes.
